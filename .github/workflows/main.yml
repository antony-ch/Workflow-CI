# Workflow-CI/.github/workflows/main.yml
name: CI/CD MLflow Model Retraining

on:
  push:
    branches:
      - main # Trigger saat ada push ke branch main
  workflow_dispatch: # Memungkinkan trigger manual dari GitHub UI

jobs:
  retrain_model:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.12.7 # Pastikan ini sama dengan di conda.yaml Anda
          activate-environment: mlflow-project-env # Nama env dari conda.yaml
          auto-activate-base: false # Hindari aktivasi base env
          auto-update-conda: true # Tambahkan ini: Pastikan conda up-to-date dan terinisialisasi

      - name: Install dependencies
        # Penting: Gunakan 'shell: bash -l {0}' untuk memastikan login shell,
        # yang akan menginisialisasi conda dengan benar.
        shell: bash -l {0}
        run: |
          conda activate mlflow-project-env # Aktifkan environment Conda
          pip install -r MLProject/requirements.txt # Menginstal dependencies dari requirements.txt
          # Jika semua sudah di conda.yaml dan tidak ada requirements.txt terpisah di MLProject:
          # conda env update --file MLProject/conda.yaml

      - name: Configure DagsHub credentials
        shell: bash -l {0} # Gunakan login shell
        run: |
          conda activate mlflow-project-env # Aktifkan environment lagi untuk step ini
          # Menggunakan secrets untuk username dan token DagsHub
          export MLFLOW_TRACKING_USERNAME="${{ secrets.DAGSHUB_USERNAME }}"
          export MLFLOW_TRACKING_PASSWORD="${{ secrets.DAGSHUB_TOKEN }}"
          export MLFLOW_TRACKING_URI="https://dagshub.com/antony-ch/Eksperimen_SML_AntonyCH.mlflow"
          echo "MLflow tracking URI set to DagsHub."

          # Menginisialisasi DagsHub secara eksplisit (penting untuk MLflow Project)
          python -c "import dagshub; dagshub.init(repo_owner='antony-ch', repo_name='Eksperimen_SML_AntonyCH', mlflow=True)"

      - name: Run MLflow Project
        shell: bash -l {0} # Gunakan login shell
        run: |
          conda activate mlflow-project-env # Aktifkan environment lagi untuk step ini
          # Pastikan Anda menggunakan perintah yang benar sesuai MLProject Anda.
          # Jika modelling.py tidak menerima parameter:
          mlflow run MLProject
          # Jika modelling.py menerima parameter (misalnya dari MLProject Anda):
          # mlflow run MLProject -P alpha=0.5 -P l1_ratio=0.5
        env:
          MLFLOW_TRACKING_URI: https://dagshub.com/antony-ch/Eksperimen_SML_AntonyCH.mlflow
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}

      # --- BAGIAN UNTUK SKILLED (3 pts): Menyimpan Artefak ke Repo GitHub ---
      # Ini akan mengupload artefak (gambar CM dan ROC) kembali ke repo GitHub ini
      - name: Upload MLflow artifacts to GitHub repo
        uses: actions/upload-artifact@v4 # Gunakan versi terbaru
        with:
          name: mlflow-run-artifacts
          # MLflow menyimpan artefak di folder mlruns/ di root proyek MLflow Project.
          # Sesuaikan path ini jika Anda menyimpan artefak di lokasi lain secara manual.
          path: |
            mlruns/
          retention-days: 7 # Opsional: Berapa lama artefak disimpan di GitHub

      # --- OPSIONAL UNTUK ADVANCE (4 pts): Build Docker Image (PERHATIAN KINERJA) ---
      # Ini hanya sebagai contoh. Menjalankannya mungkin membutuhkan resources yang besar.
      # Jangan dijalankan jika perangkat lokal Anda tidak mendukung Docker dengan baik.
      # GitHub Actions runners cukup kuat untuk ini, tetapi konfigurasi Docker Hub diperlukan.
      # - name: Build and Push Docker Image
      #   if: always() # Jalankan ini bahkan jika langkah sebelumnya gagal
      #   shell: bash -l {0} # Gunakan login shell
      #   run: |
      #     conda activate mlflow-project-env # Aktifkan environment
      #     # Login ke Docker Hub
      #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #     # Build Docker Image dari MLflow Project dan push ke Docker Hub
      #     mlflow build-docker MLProject --model-path "model" --image-name your-dockerhub-username/my-mlflow-model-image:latest --push
      #     # Catatan: --model-path "model" akan mencari model yang dilog dengan nama "model"
      #     # di MLflow Run yang baru saja dibuat.
      #   env:
      #     MLFLOW_TRACKING_URI: https://dagshub.com/antony-ch/Eksperimen_SML_AntonyCH.mlflow
      #     MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      #     MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}